import logging
import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    MessageHandler,
    filters,
    ContextTypes,
)
import config
from pdf_generator import generate_pdf

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è
SELECTING_TEMPLATE = 1
ENTERING_TEXT = 2

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    message = (
        "üëã *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ PDF –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ë–æ—Ç!* üöÄ\n\n"
        "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å–æ–∑–¥–∞—Ç—å PDF-–¥–æ–∫—É–º–µ–Ω—Ç –ø–æ –≥–æ—Ç–æ–≤–æ–º—É —à–∞–±–ª–æ–Ω—É.\n\n"
        "*–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:*\n"
        "- –í—ã–±–µ—Ä–∏ —à–∞–±–ª–æ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞.\n"
        "- –û—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –≤—Å—Ç–∞–≤–∏—Ç—å.\n"
        "- –ü–æ–ª—É—á–∏ PDF-–¥–æ–∫—É–º–µ–Ω—Ç! üìÑ\n\n"
        "–ù–∞—á–Ω—ë–º?"
    )
    keyboard = [
        [
            InlineKeyboardButton("üìÑ –í—ã–±—Ä–∞—Ç—å —à–∞–±–ª–æ–Ω", callback_data="select_template"),
            InlineKeyboardButton("‚ÑπÔ∏è –û –±–æ—Ç–µ", callback_data="about"),
        ]
    ]
    await update.message.reply_text(message, parse_mode="Markdown", reply_markup=InlineKeyboardMarkup(keyboard))

async def about(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    message = (
        "‚ÑπÔ∏è *–û –±–æ—Ç–µ PDF –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä*\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞—ë—Ç PDF-–¥–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ —à–∞–±–ª–æ–Ω—É –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–≤–æ–µ–≥–æ —Ç–µ–∫—Å—Ç–∞. üìÑ\n"
        "–°–æ–∑–¥–∞–Ω —Å ‚ù§Ô∏è –∞–≤—Ç–æ—Ä–æ–º [Your Name].\n"
        "–ò—Å—Ö–æ–¥–Ω—ã–π –∫–æ–¥: [GitHub](https://github.com/vincent1go/telegram-pdf-bot)\n\n"
        "–ì–æ—Ç–æ–≤ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å? –í–µ—Ä–Ω—ë–º—Å—è –≤ –º–µ–Ω—é! üîÑ"
    )
    keyboard = [[InlineKeyboardButton("üè† –í –º–µ–Ω—é", callback_data="main_menu")]]
    await query.message.edit_text(message, parse_mode="Markdown", reply_markup=InlineKeyboardMarkup(keyboard), disable_web_page_preview=True)

async def main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    message = (
        "üëã *–° –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ–º –≤ PDF –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –ë–æ—Ç!* üöÄ\n\n"
        "–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å:"
    )
    keyboard = [
        [
            InlineKeyboardButton("üìÑ –í—ã–±—Ä–∞—Ç—å —à–∞–±–ª–æ–Ω", callback_data="select_template"),
            InlineKeyboardButton("‚ÑπÔ∏è –û –±–æ—Ç–µ", callback_data="about"),
        ]
    ]
    await query.message.edit_text(message, parse_mode="Markdown", reply_markup=InlineKeyboardMarkup(keyboard))

async def select_template(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    message = "*üìÑ –í—ã–±–µ—Ä–∏ —à–∞–±–ª–æ–Ω*\n\n–í—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤:"
    keyboard = []
    names = list(config.TEMPLATES.keys())
    for i in range(0, len(names), 2):
        row = [InlineKeyboardButton(f"üìÑ {names[i]}", callback_data=f"template_{names[i]}")]
        if i + 1 < len(names):
            row.append(InlineKeyboardButton(f"üìÑ {names[i+1]}", callback_data=f"template_{names[i+1]}"))
        keyboard.append(row)
    keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel")])
    await query.message.edit_text(message, parse_mode="Markdown", reply_markup=InlineKeyboardMarkup(keyboard))
    context.user_data["state"] = SELECTING_TEMPLATE

async def template_selected(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    template_name = query.data.replace("template_", "")
    if template_name not in config.TEMPLATES:
        await query.message.edit_text("‚ö†Ô∏è *–û—à–∏–±–∫–∞*: –ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —à–∞–±–ª–æ–Ω.", parse_mode="Markdown")
        return
    context.user_data["template"] = template_name
    context.user_data["state"] = ENTERING_TEXT
    message = (
        f"‚úÖ *–í—ã–±—Ä–∞–Ω —à–∞–±–ª–æ–Ω*: {template_name}\n\n"
        "üìù –û—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –≤—Å—Ç–∞–≤–∏—Ç—å –≤ —à–∞–±–ª–æ–Ω."
    )
    keyboard = [
        [
            InlineKeyboardButton("üîÑ –ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="select_template"),
            InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel"),
        ]
    ]
    await query.message.edit_text(message, parse_mode="Markdown", reply_markup=InlineKeyboardMarkup(keyboard))

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()
    context.user_data.clear()
    message = "‚ùå *–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞*\n\n–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å:"
    keyboard = [
        [
            InlineKeyboardButton("üìÑ –í—ã–±—Ä–∞—Ç—å —à–∞–±–ª–æ–Ω", callback_data="select_template"),
            InlineKeyboardButton("‚ÑπÔ∏è –û –±–æ—Ç–µ", callback_data="about"),
        ]
    ]
    await query.message.edit_text(message, parse_mode="Markdown", reply_markup=InlineKeyboardMarkup(keyboard))

async def receive_text(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if context.user_data.get("state") != ENTERING_TEXT:
        await update.message.reply_text("‚ö†Ô∏è –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ —à–∞–±–ª–æ–Ω —á–µ—Ä–µ–∑ –º–µ–Ω—é.", parse_mode="Markdown")
        return
    text = update.message.text
    template_name = context.user_data.get("template")
    template_path = config.TEMPLATES.get(template_name)
    try:
        pdf_path = generate_pdf(template_path, text)
        with open(pdf_path, "rb") as f:
            await update.message.reply_document(
                document=f,
                caption=f"‚úÖ *PDF-–¥–æ–∫—É–º–µ–Ω—Ç –≥–æ—Ç–æ–≤!* üéâ\n–®–∞–±–ª–æ–Ω: {template_name}",
                parse_mode="Markdown"
            )
        context.user_data.clear()
        await update.message.reply_text(
            "üìé –•–æ—á–µ—à—å —Å–æ–∑–¥–∞—Ç—å –µ—â—ë –æ–¥–∏–Ω –¥–æ–∫—É–º–µ–Ω—Ç?",
            reply_markup=InlineKeyboardMarkup([
                [
                    InlineKeyboardButton("üìÑ –ù–æ–≤—ã–π —à–∞–±–ª–æ–Ω", callback_data="select_template"),
                    InlineKeyboardButton("‚ÑπÔ∏è –û –±–æ—Ç–µ", callback_data="about")
                ]
            ]),
            parse_mode="Markdown"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ PDF: {e}")
        await update.message.reply_text(
            f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ PDF:\n\n{str(e)}",
            parse_mode="Markdown"
        )

async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    logger.error(f"Update {update} –≤—ã–∑–≤–∞–ª –æ—à–∏–±–∫—É {context.error}")
    if update.message:
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")

def main():
    application = Application.builder().token(config.BOT_TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(select_template, pattern="select_template"))
    application.add_handler(CallbackQueryHandler(main_menu, pattern="main_menu"))
    application.add_handler(CallbackQueryHandler(about, pattern="about"))
    application.add_handler(CallbackQueryHandler(cancel, pattern="cancel"))
    application.add_handler(CallbackQueryHandler(template_selected, pattern="template_.*"))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, receive_text))
    application.add_error_handler(error_handler)
    application.run_polling()

if __name__ == "__main__":
    main()
